package com.kh.chap04._field.model.vo;

/*
 * >> 변수 구분
 * 
 *  - 전역 변수 : 
 *  클래스 영역에 바로 선언한 변수 --> 클래스 내에서면 어디서든 전역으로 사용 가능하다.  ( 전체지역 )
 *  
 *  - 지역 변수 :
 *  클래스 영역내에 어떤 특정한 구역 ({}) 에 선언한 변수 --> 선언된 해당 그 지역에서만 사용 가능하다.
 *  				● 특정한 구역 : 메소드 {}, 제어문 (if, for) {} 등등...
 *  
 *  
 *   1. 전역변수
 *   - 필드 == 멤버변수 == 인스턴스 변수
 *   생성시점 : new 연산자를 통하여 객체를 생성시
 *   소멸시점 : 객체 소멸시 같이 소멸
 *   
 *   - 클래스 변수 == static 변수 => 예약어 쓸 수 있는데 static 이란걸 쓰면 클래스 변수가 됨
 *   생성시점 : 프로그램 실행(해당  객체 생성 안돼도)과 동시에 무조건 메모리 영역(static)에 할당한다.
 *   소멸시점 : 프로그럄 종료될때 소멸
 *   
 *   
 *   2. 지역변수
 *   생성시점 : 지역변수가 속해있는 특정한 구역({}) 실행(호출)시 메모리 영역에 할당
 *   소멸시점 : 특정한 구역({}) 종료시 소멸
 *  
 *  
 *  
 */

public class FieldTest1 { // 클래스 영역 시작
	
	private int a; // 전역변수 클래스 안에서 어디서든 사용가능
	
	public void method1() {
		int b = 10;				// 지역변수 해당 메소드 안에서만 사용
		System.out.println(b); 
		if(true) {
			int c = 20;			 // { } 안에서 선언된 변수는 해당 지역에서만 사용 가능
		}
	}
	
	public void method2() {
		System.out.println(a);
	}
	
	
	// 멤버변수 (인스턴스변수) => 전역변수
	private int global;
	
	public void test(int num) { // test 메소드 시작
		// 메개변수(일종의 지역변수 즉, 메소드 영역 내에서만 쓸 수 있음)
		
		// 지역변수(메소드 영역내에 선언) => 지역변수에서는 접근제한자 같은거 붙이는거 아님
		int local=10;
		
		// 멤버변수 출력 => 멤버변수는 해당 이 객체 생성시 JVM이 기본값으로 초기화
		System.out.println(global); // 최기화 안돼있음. 그래도 오류 안남. heap영역에 생성될때 초기화
		
		// 매개변수 출력 => 매개변수는 해당 이메소드 호출시 반드시 값이 전달될거기 때문에 초기화 안되있어도됨!
		System.out.println(num); // 초기화는 안돼있음. 근데 오류 안남. 매개변수로 무조건 하나는 넣을거니까
		
		// 지역변수 출력
		System.out.println(local); // 초기화가 안돼있음. 이건 오류발생
		
	} // test 메소드 끝
	
	
	
	
} // 클래스 영역 끝
